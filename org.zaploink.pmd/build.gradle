apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

// -------------------- variables --------------------
ext {
 	releaseVersion = '0.1.0'
	snapshot = true
	osgiBundleVersion = releaseVersion + (snapshot ? '.snapshot' : '')
	fragmentOutputDir = 'eclipse-plugin-fragments'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'org.zaploink'
archivesBaseName = 'zaploink-pmd'
version = releaseVersion + (snapshot ? '-SNAPSHOT' : '')

// -------------------- dependencies --------------------

repositories {
    jcenter()
}

dependencies {
	compile 'net.sourceforge.pmd:pmd-core:5.4.0'
	compile 'net.sourceforge.pmd:pmd-java:5.4.0'
	compile 'com.google.code.gson:gson:2.4'
	
  	testCompile 'junit:junit:4.12'
}

// -------------------- tasks --------------------

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task eclipsePluginFragmentAcanda(type: Jar) {
	description 'Creates a plugin-fragment with custom rules for the Acanda Eclipse-Plugin.'
	
	from {
	    configurations.compile
	    	.filter { it.name.startsWith('gson') }
	    	.collect { zipTree(it) }
	  }
	with jar
	// might want to use OSGI plugin later: https://docs.gradle.org/current/userguide/osgi_plugin.html
	// manifest merging is described here: https://docs.gradle.org/current/userguide/java_plugin.html
	manifest {
		from ('../org.zaploink.eclipse.pmd.acanda.fragment/META-INF/MANIFEST.MF') {
			// the attributes defined below (=base manifest) should win
			eachEntry { it.value = (it.baseValue != null) ? it.baseValue : it.mergeValue }
		}
		attributes 'Bundle-Version' : osgiBundleVersion
	}	
	archiveName "org.zaploink.eclipse.pmd.acanda.fragment-${osgiBundleVersion}.jar"
	destinationDir file(fragmentOutputDir);
}

// -------------------- configurations --------------------

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

artifacts {
    archives sourcesJar, javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name "Zaploink's Custom PMD Rules"
        packaging 'jar'
        description 'A set of custom PMD rules for Java.'
        url 'https://github.com/zaploink/pmd'

        scm {
          connection 'scm:git:git@github.com:zaploink/pmd.git'
          developerConnection 'scm:git:git@github.com:zaploink/pmd.git'
          url 'https://github.com/zaploink/pmd'
        }

        licenses {
          license {
            name 'The MIT License (MIT)'
            url 'https://zaploink.mit-license.org'
          }
        }

        developers {
          developer {
            id 'zaploink'
            name 'Kaspar von Gunten'
            email 'zaploink@code.zaploink.org'
          }
        }
      }
    }
  }
}